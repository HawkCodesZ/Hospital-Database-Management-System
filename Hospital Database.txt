
RDBMS
HOSPITAL DATABASE





By




Sagnik Gangopadhyay
229310415





Abstract:

The development of a comprehensive hospital database is a pivotal endeavor aimed at 
enhancing healthcare delivery, patient management, and administrative efficiency. This 
report outlines the design and implementation of a versatile hospital database system that 
encompasses various vital entities within a healthcare facility.

The database architecture integrates Patients, Doctors, Nurses, Administrative Staff, 
General Staff, Departments, Medical Records, Appointments, Medications, and a multitude 
of specialized Tests and Procedures. These specialized entities include diagnostics, imaging, 
genetic testing, and other medical procedures essential for accurate diagnosis and effective 
patient care.

The database design emphasizes robust data security, adherence to healthcare data privacy 
regulations, and seamless information flow. It employs normalization techniques to 
minimize data redundancy while ensuring data integrity. Moreover, it incorporates 
relationships that interconnect these entities, enabling efficient tracking of patient records, 
treatment history, and procedural outcomes.

With the proposed database, healthcare professionals can effortlessly access patient 
information, manage appointments, track medical records, and administer medications. 
Additionally, it provides critical support for surgical procedures, follow-up appointments, 
emergency cases, and medico-legal aspects.

This hospital database system serves as a fundamental infrastructure for streamlining 
healthcare operations, improving patient care, and ensuring the integrity and security of 
healthcare data, ultimately enhancing the quality of medical services and patient outcomes.






Introduction:

In the modern healthcare landscape, effective patient management, secure data storage, 
and streamlined operational processes are paramount. The creation and implementation of 
a comprehensive hospital database represent a pivotal solution to address these critical 
needs. This report embarks on a journey to conceptualize and design a robust hospital 
database system, tailored to meet the dynamic requirements of healthcare facilities.

Within the complex ecosystem of a hospital, multiple entities interplay to deliver 
exceptional patient care. Patients, Doctors, Nurses, Administrative Staff, and General Staff 
form the core workforce, while Departments serve as organizational units. Integral to this 
landscape are Medical Records, Appointments, Medications, and a diverse array of 
specialized Tests and Procedures, each playing a vital role in the continuum of care.

The database's core mission is to interconnect these entities seamlessly, facilitating data 
accessibility, real-time decision-making, and compliance with healthcare regulations. 
Moreover, it strives to optimize the workflow, from the initial patient appointment to 
follow-up care, surgical interventions, emergency responses, and medico-legal aspects.

The following sections delve into the architectural intricacies of this database, emphasizing 
the principles of data integrity, security, and operational efficiency. This report aims to serve 
as a guide for healthcare institutions seeking to harness the transformative power of a well-
structured hospital database system, ultimately improving patient care and healthcare 
management.







1)	System Requirements Specification(SRS):

a)	Operating System:
*	Any modern operating system such as Windows, macOS, or Linux will work.
b)	Text Editor or Integrated Development Environment (IDE):
*	A text editor or an IDE is needed to write, edit, and manage the code. Examples 
include Visual Studio Code, PyCharm, Sublime Text, or any text editor of choice.
c)	Programming Language:
*	We need a programming language or framework to develop the application. Common 
choices will include Python, Java, C#, or a web-based framework like Django or Ruby 
on Rails. SQL is needed for making of the database
d)	Database Management System (DBMS):
*	Depending on the chosen programming language, need a DBMS that integrates well. 
For example, MySQL, PostgreSQL, SQLite, or any other relational database system.
e)	Web Server:
*	For a web-based application, we may need a web server. For instance, if we are using 
Django, it has a built-in development server.
f)	Front-end Technologies:
*	The program includes a front-end (user interface),we will need technologies like 
HTML, CSS, and JavaScript.
g)	Database Design Tools:
*	To design the database schema, we might use a tool like MySQL Workbench, 
PostgreSQL's pgAdmin, or any other database design tool.
h)	Version Control (optional but recommended):
*	Using version control tools like Git and platforms like GitHub or GitLab is 
recommended for managing your codebase.
i)	System Resources:
*	Ensure our system has enough resources (CPU, memory, storage) to comfortably run 
your chosen development environment and any necessary services.
j)	Internet Access:
*	Depending on our development needs (e.g., installing packages, accessing resources), 
An internet connection of around 500megabits per second may be required.
k)	Security Considerations:
*	Following secure coding practices to prevent common vulnerabilities, such as 
SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF). 
Using parameterized queries and input validation to mitigate these risks.
*	Enforcing strong password policies for user accounts. Requiring 
complex passwords and regular password changes.
*	Implement proper error handling to avoid exposing sensitive 
information in error messages. Display generic error messages to 
users and log detailed errors internally.
















2)	SYSTEM MODELING:

A.	Entity Relationship (ER):




Entities:

Patients
Doctors
Nurses
Administrative Staff
General Staff
Departments
Medical Records
Appointments
Medications
Tests and Procedures (with subtypes like "Blood Reports," "CT Scans," etc.)
Rooms
Inventory/Supplies
Surgery
Follow Up
Emergency Management
Medico Legal Aspect
Relationships (simplified examples):

Patients are assigned to Doctors (Many-to-One).
Doctors work in Departments (Many-to-One).
Nurses work in Departments (Many-to-One).
Administrative Staff work in Departments (Many-to-One).
General Staff work in Departments (Many-to-One).
Medical Records are associated with Patients and Doctors (Many-to-One and Many-to-
One).
Appointments are scheduled for Patients and involve Doctors (Many-to-One and Many-
to-One).
Medications are prescribed to Patients by Doctors (Many-to-One and Many-to-One).
Tests and Procedures can be further decomposed (subtype entity) and are associated 
with Patients and Doctors (Many-to-One and Many-to-One).
Rooms are assigned to Patients and managed by Nurses (One-to-Many and Many-to-
One).
Inventory/Supplies are managed by Administrative Staff (One-to-Many).
Surgery involves Patients, Doctors, and Nurses (Many-to-One, Many-to-One, and Many-
to-Many).
Follow Up appointments are scheduled for Patients and involve Doctors (Many-to-One 
and Many-to-One).
Emergency Management cases involve Patients, Doctors, and Nurses (Many-to-One, 
Many-to-One, and Many-to-Many).
Medico Legal Aspect cases involve Patients and Doctors (Many-to-One and Many-to-
One).








B.	Schema Design:

Schema: Hospital Management System



Tables:
Patients
PatientID (PK)
Name
Age
Gender
ContactInfo
Address

Doctors
DoctorID (PK)
Name
Specialization
ContactInfo
DepartmentID (FK)

Nurses
NurseID (PK)
Name
ContactInfo
DepartmentID (FK)

AdministrativeStaff
StaffID (PK)
Name
Role
ContactInfo

GeneralStaff
StaffID (PK)
Name
Role
ContactInfo
DepartmentID (FK)

Departments
DepartmentID (PK)
DepartmentName

MedicalRecords
RecordID (PK)
PatientID (FK)
DoctorID (FK)
Date
Diagnosis
Treatment

Appointments
AppointmentID (PK)
PatientID (FK)
DoctorID (FK)
Date
Time

Medications
MedicationID (PK)
PatientID (FK)
DoctorID (FK)
MedicationName
Dosage
Frequency

TestsProcedures
TestProcedureID (PK)
PatientID (FK)
DoctorID (FK)
Type
Date

Rooms
RoomID (PK)
RoomNumber
DepartmentID (FK)

InventoryItems
ItemID (PK)
ItemName
Quantity
DepartmentID (FK)

Surgeries
SurgeryID (PK)
PatientID (FK)
DoctorID (FK)
Date
Time

FollowUps
FollowUpID (PK)
PatientID (FK)
DoctorID (FK)
Date
Time

EmergencyCases
EmergencyID (PK)
PatientID (FK)
Date
Time

MedicoLegalCases
MedicoLegalCaseID 
(PK)
PatientID (FK)
DoctorID (FK)
Description
LegalStatus

Amniocentesis
ProcedureID (PK)
PatientID (FK)
DoctorID (FK)
DateOfProcedure
IndicationReason
Results
LabTechnicianID (FK)
Comments

BloodAnalysis
ProcedureID (PK)
PatientID (FK)
DoctorID (FK)
DateOfAnalysis
TypeOfBloodTest
TestResults
LabTechnicianID (FK)
Comments

BoneMarrowAspiratio
n
ProcedureID (PK)
PatientID (FK)
DoctorID (FK)
DateOfAspiration
PurposeIndication
Results
LabTechnicianID (FK)
Comments

ECG
ProcedureID (PK)
PatientID (FK)
DoctorID (FK)
DateOfECG
ECGReport
TechnicianID (FK)
Comments

Ultrasound
ProcedureID (PK)
PatientID (FK)
DoctorID (FK)
DateOfUltrasound
TypeOfUltrasound
UltrasoundImagesRep
orts
RadiologistID (FK)
Comments

MRI
ProcedureID (PK)
PatientID (FK)
DoctorID (FK)
DateOfMRI
MRIImagesReports
RadiologistID (FK)
Comments

Biopsy
ProcedureID (PK)
PatientID (FK)
DoctorID (FK)
DateOfBiopsy
TypeOfBiopsy
BiopsyResults
PathologistID (FK)
Comments

Autopsy
ProcedureID (PK)
DeceasedPatientID 
(FK)
PerformingPathologis
tID (FK)
DateOfAutopsy
AutopsyFindings
Comments





C.	 Data Normalization:

1.	Patients Table:
*	Primary Key (PK): PatientID
2.	Doctors Table:
*	Primary Key (PK): DoctorID
*	Foreign Key (FK): DepartmentID references Departments(DepartmentID)
3.	Nurses Table:
*	Primary Key (PK): NurseID
*	Foreign Key (FK): DepartmentID references Departments(DepartmentID)
4.	AdministrativeStaff Table:
*	Primary Key (PK): StaffID
5.	GeneralStaff Table:
*	Primary Key (PK): StaffID
*	Foreign Key (FK): DepartmentID references Departments(DepartmentID)
6.	Departments Table:
*	Primary Key (PK): DepartmentID
7.	MedicalRecords Table:
*	Primary Key (PK): RecordID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
8.	Appointments Table:
*	Primary Key (PK): AppointmentID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
9.	Medications Table:
*	Primary Key (PK): MedicationID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
10.	TestsProcedures Table:
*	Primary Key (PK): TestProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
11.	Rooms Table:
*	Primary Key (PK): RoomID
*	Foreign Key (FK): DepartmentID references Departments(DepartmentID)
12.	InventoryItems Table:
*	Primary Key (PK): ItemID
*	Foreign Key (FK): DepartmentID references Departments(DepartmentID)
13.	Surgeries Table:
*	Primary Key (PK): SurgeryID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
14.	FollowUps Table:
*	Primary Key (PK): FollowUpID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
15.	EmergencyCases Table:
*	Primary Key (PK): EmergencyID
*	Foreign Key (FK): PatientID references Patients(PatientID)
16.	MedicoLegalCases Table:
*	Primary Key (PK): MedicoLegalCaseID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
17.	Amniocentesis Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
*	Foreign Key (FK): LabTechnicianID references 
LabTechnicians(LabTechnicianID)
18.	BloodAnalysis Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
*	Foreign Key (FK): LabTechnicianID references 
LabTechnicians(LabTechnicianID)
19.	BoneMarrowAspiration Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
*	Foreign Key (FK): LabTechnicianID references 
LabTechnicians(LabTechnicianID)
20.	ECG Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
*	Foreign Key (FK): TechnicianID references Technicians(TechnicianID)
21.	Ultrasound Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
*	Foreign Key (FK): RadiologistID references Radiologists(RadiologistID)
22.	MRI Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
*	Foreign Key (FK): RadiologistID references Radiologists(RadiologistID)
23.	Biopsy Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): PatientID references Patients(PatientID)
*	Foreign Key (FK): DoctorID references Doctors(DoctorID)
*	Foreign Key (FK): PathologistID references Pathologists(PathologistID)
24.	Autopsy Table:
*	Primary Key (PK): ProcedureID
*	Foreign Key (FK): DeceasedPatientID references Patients(PatientID)
*	Foreign Key (FK): PerformingPathologistID references 
Pathologists(PathologistID)


















D.	List of tables required:

After normalizing the data in the hospital management system, the 
following tables are required:


1.	Patients
*	PatientID 
(PK)
*	Name
*	Age
*	Gender
*	ContactInfo
*	Address
2.	Doctors
*	DoctorID 
(PK)
*	Name
*	Specializati
on
*	ContactInfo
*	Department
ID (FK)
3.	Nurses
*	NurseID 
(PK)
*	Name
*	ContactInfo
*	Department
ID (FK)
4.	AdministrativeStaff
*	StaffID (PK)
*	Name
*	Role
*	ContactInfo
5.	GeneralStaff
*	StaffID (PK)
*	Name
*	Role
*	ContactInfo
*	Department
ID (FK)
6.	Departments
*	Department
ID (PK)
*	Department
Name
7.	MedicalRecords
*	RecordID 
(PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	Date
*	Diagnosis
*	Treatment
8.	Appointments
*	Appointme
ntID (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	Date
*	Time
9.	Medications
*	MedicationI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	Medication
Name
*	Dosage
*	Frequency
10.	TestsProcedures
*	TestProced
ureID (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	Type
*	Date
11.	Rooms
*	RoomID 
(PK)
*	RoomNumb
er
*	Department
ID (FK)
12.	InventoryItems
*	ItemID (PK)
*	ItemName
*	Quantity
*	Department
ID (FK)
13.	Surgeries
*	SurgeryID 
(PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	Date
*	Time
14.	FollowUps
*	FollowUpID 
(PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	Date
*	Time
15.	EmergencyCases
*	EmergencyI
D (PK)
*	PatientID 
(FK)
*	Date
*	Time
16.	MedicoLegalCases
*	MedicoLega
lCaseID (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	Description
*	LegalStatus
17.	Amniocentesis
*	ProcedureI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	DateOfProc
edure
*	IndicationR
eason
*	Results
*	LabTechnici
anID (FK)
*	Comments
18.	BloodAnalysis
*	ProcedureI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	DateOfAnal
ysis
*	TypeOfBloo
dTest
*	TestResults
*	LabTechnici
anID (FK)
*	Comments
19.	BoneMarrowAspira
tion
*	ProcedureI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	DateOfAspir
ation
*	PurposeIndi
cation
*	Results
*	LabTechnici
anID (FK)
*	Comments
20.	ECG
*	ProcedureI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	DateOfECG
*	ECGReport
*	TechnicianI
D (FK)
*	Comments
21.	Ultrasound
*	ProcedureI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	DateOfUltra
sound
*	TypeOfUltra
sound
*	UltrasoundI
magesRepo
rts
*	RadiologistI
D (FK)
*	Comments
ProcedureI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	DateOfMRI
*	MRIImages
Reports
*	RadiologistI
D (FK)
*	Comments
22.	Biopsy
*	ProcedureI
D (PK)
*	PatientID 
(FK)
*	DoctorID 
(FK)
*	DateOfBiop
sy
*	TypeOfBiop
sy
*	BiopsyResul
ts
*	PathologistI
D (FK)
*	Comments
23.	Autopsy
*	ProcedureI
D (PK)
*	DeceasedPa
tientID (FK)
*	Performing
PathologistI
D (FK)
*	DateOfAuto
psy
*	AutopsyFin
dings
*	Comments
























E.	Additional Components:

For the smooth working of the proposed hospital database system, several additional 
functions and procedures should be considered to enhance functionality, security, and 
efficiency. Here are some key functions and procedures to include:
User Authentication and Authorization:
Implementing a robust authentication system that verifies the identity of users before 
granting access. Authorization mechanisms should define user roles and permissions.
User Management:
Creating functions for user management, including adding, modifying, and deactivating 
user accounts. Password management and user profile updates should also be included.
Data Import and Export:
Develop procedures to import existing patient data and medical records into the 
database. Allow for data export in standardized formats for interoperability.
Data Archiving and Retention:
Implementing functions to archive and retain data as required by healthcare regulations. 
Define data retention policies for historical records.
Alerts and Notifications:
Setting up functions for generating alerts and notifications for appointments, medication 
schedules, and critical patient updates. Notifications can be sent via email, SMS, or 
within the system.
Search and Reporting:
Design search functionalities that allow users to query and retrieve patient data, medical 
records, and other information efficiently. Include reporting tools to generate custom 
reports and analytics.
Data Validation and Quality Assurance:
Develop data validation procedures to ensure data accuracy and integrity. Check for 
data inconsistencies and provide methods for data correction.
Backup and Recovery:
Implementing automated backup procedures to create regular backups of the database. 
Establish a recovery process to restore data in case of system failures or data loss.
Audit Trail Maintenance:
Continuously maintain and review audit logs to track changes and access to sensitive 
patient data. Create procedures for forensic analysis in case of security incidents.
Security Incident Response:
Establish a comprehensive security incident response plan, including procedures for 
detecting, reporting, and mitigating security breaches.
Data De-identification and Anonymization:
Develop functions for de-identifying and anonymizing patient data to protect privacy 
when sharing data for research or other purposes.
Interoperability:
Implement functions and standards for interoperability with other healthcare systems, 
such as Electronic Health Records (EHR) systems, to ensure seamless data exchange.
Scalability and Performance Tuning:
Create procedures for scaling the system as the hospital grows. Performance tuning 
should optimize database queries and maintain optimal response times.
Disaster Recovery:
Design a comprehensive disaster recovery plan that includes procedures for data 
restoration in case of natural disasters or catastrophic system failures.
User Training and Support:
Develop user training materials and provide support channels for hospital staff to ensure 
they can use the system effectively and address any issues or questions.
Compliance Monitoring:
Regularly monitor the system's compliance with healthcare data privacy regulations, 
such as HIPAA, and update procedures to maintain compliance.
System Maintenance and Updates:
Create procedures for applying software updates, security patches, and database 
optimizations to ensure the system remains secure and efficient.
Help Desk and Troubleshooting:
Establish a help desk or support team to assist users with technical issues, questions, 
and troubleshooting.





Conclusion:

In conclusion, the development of the Hospital Database System represents a monumental 
step towards elevating the standards of patient care, data management, and administrative 
efficiency within our healthcare facility. This project, with its meticulously designed 
architecture and comprehensive set of functions, holds the promise of transforming 
hospitals into a cutting-edge institutions where patient well-being and data security are 
paramount.

By seamlessly integrating the various entities, from patients to medical procedures, and 
through the implementation of secure coding practices, robust security measures, and user-
friendly functionalities, hospitals will benefit from enhanced data accessibility, real-time 
decision-making, and strict adherence to data privacy regulations.

This project underscores our commitment to delivering the highest quality healthcare 
services. With the ability to create, store, and retrieve patient records efficiently, schedule 
appointments seamlessly, and monitor patient progress in real-time, medical professionals 
will be better equipped to provide timely and informed care.

As we embark on this journey, I am confident that the successful implementation of this 
system will foster an environment where medical excellence and patient-centric care are 
the cornerstones.

